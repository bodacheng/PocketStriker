//4.18日我们对动画控制器做了新的修改

// 为了能够加快场景的加载速度，我们决定让所有类型的战士都共用类型内同一动画器，
// 并把该类型内所有的动画都给拖到这个动画器里。

// 在每个角色的动画控制器inspector上我们会看到那些个个性化动画的地址填写栏，
// 这些里有的是会去覆盖base层的基础运动动画，有的是会去覆盖实时加载动画字典。

// 在这样的企划下，整个动画系统适配过程中产生了一些比曾经更加严苛的注意点，我们现在做这些总结

// 1. 基础层的动画片段名必须是 idle，walk, run , air 否则将无法通过指定个性化动画路径的方式对其进行个性化覆盖。
//2. 每个角色类型的动画文件夹下，除了basic 和 unused外，其他子文件夹下的动画片段必须全部拖进animator。
//3. Rush 和 RushBack这两个子文件夹下，分别都只需要放一个动画片段，系统会相应的做出两个机动类技能。在技能生成器里本这两个技能的动画名似乎是随便的，
//但，如果对其进行个性化覆盖，则必须用Rush 和 RushBack这两个动画名，从而与系统对其他动画覆盖的处理进行统一，也方便个性化动画文件夹的管理
//4. 所谓个性化动画文件夹全部都在PERSONALS文件夹下。由于系统会根据动画名来搜索相应的个性动画片段，因此可以这样处理。。。比如一个叫飞行者的文件夹里，
//有block block_break，walk, run等种种基础动画片段，特点都是非常飘逸，而有个叫陆战队的文件夹下也有相应名字的动画片段，特点是比较沉稳，
//那么对一个角色来说你防御个性化那里可能idle写的陆战队，行走写的飞行者，他就是不动的时候像个陆战队员站地上，移动时候就会飘逸的飞起来。
//5. 与曾经一样角色仍然都需要一个dash动画来表现普攻冲刺时的进攻，但这个片段从此必须和基础移动里的walk和run区分开来。原则上它也应该和其他机动类技能区别开，因为这样才有利于个性化编辑。
//但同时我们必须要在相应技能类里把这个问题变得不要太苛刻，万一找不到dash动画片段，就靠run来代替。
//6. 基础动画文件夹分成了Basic和RT_Basic，RT_Basic就是需要实时加载的基础动画，包括击飞，跳跃，防御，防御震动，被控制等等
//7.为了更生动的表现普通受伤和击败动作，我们仍然保留曾经读取相应文件夹下所有片段并随机加载的机制。并且这个可能也有点需要个性化的东西，我们就不打算对其进行个性化了。每种类角色在受伤和被打败后的动作都是从
//统一的文件夹中随机抽取。显然，这两个文件夹下的所有动画片段也是必须要拖到相应的animator来确保这个事情正常运行。

//6.9日我们针对ab包热更问题再次尝试调整动画读取机制
// 首先我们不得不把由animator内直接读动画的方式放弃掉，还原成以前的动态读取，而且我们还意识到需要根据情况把用不到的动画片段从内存里剔除掉。
// 针对三大类攻击片段以及设计类动画我们没有什么疑问，但问题是那些烦冗的RT基础类动画如何管理的问题。
// 考虑到ab包管理的复杂性我们现在对这些东西的简介化怀着巨大需求。

// 来对这些特殊动画片段进行分析：

// idle，walk,run,air, 这些是animator里的基础动画，任何脚本都会用到，
//然而dash，rush，rushback，这几个能否用上貌似是都要看技能脚本
//block,block_break基本会用上因为基本所有角色都有防御
//zhuangbi和victory也是很深的事关角色的个性。
//非常确定的是这一套东西绝对就是可以做成一个系列的包，我认为这些东西到时候可以和其他类型的动画区分开，破例打成一个包，
//并且靠一些机制把这种基础动画包给分配给各个不同的角色
 
//我们把所有可能的机动动画进行一个分类，
//1.动画片段内部有向前的位移
 //2.动画片段内部有向后的位移
 //3.看起来适用于各个方向的跳跃运动
 //那么以上这几类动画应该一个包里只有一个，并且名字固定。这样我觉得事情也就顺了