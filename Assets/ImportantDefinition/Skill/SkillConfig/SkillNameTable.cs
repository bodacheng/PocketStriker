// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections.Generic;
using Cysharp.Threading.Tasks;

public class SkillNameTable
{
	public class Row
	{
		public string RECORD_ID;
		public string EN_NAME;
		public string JP_NAME;
		public string CN_NAME;
		public string EN_INTRO;
		public string JP_INTRO;
		public string CN_INTRO;
	}
    
    static readonly IDictionary<string, string> SkillNameDic = new Dictionary<string, string>();
    static readonly IDictionary<string, string> SkillIntroDic = new Dictionary<string, string>();
	static readonly List<Row> rowList = new List<Row>();
	static bool isLoaded;
    
    public static string GetSkillName(string recordId)
    {
        if (SkillNameDic.ContainsKey(recordId))
            return SkillNameDic[recordId];
        return "UnKnown";
    }
    
    public static string GetSkillIntro(string recordId)
    {
	    if (SkillIntroDic.ContainsKey(recordId))
		    return SkillIntroDic[recordId];
	    return string.Empty;
    }
    
	static void PrepareSkillNames(SystemLanguage language)
    {
	    SkillNameDic.Clear();
	    SkillIntroDic.Clear();
        foreach (var row in rowList)
        {
            if (!SkillNameDic.ContainsKey(row.RECORD_ID))
            {
                switch (language)
                {
                    case SystemLanguage.English:
                        SkillNameDic.Add(row.RECORD_ID, row.EN_NAME);
                    break;
                    case SystemLanguage.Japanese:
                        SkillNameDic.Add(row.RECORD_ID, row.JP_NAME);
                    break;
                    case SystemLanguage.Chinese:
                        SkillNameDic.Add(row.RECORD_ID, row.CN_NAME);
                    break;
                    default:
                        SkillNameDic.Add(row.RECORD_ID, row.EN_NAME);
                    break;
                }
            }
            else
            {
	            switch (language)
	            {
		            case SystemLanguage.English:
			            SkillNameDic[row.RECORD_ID] = row.EN_NAME;
			            break;
		            case SystemLanguage.Japanese:
			            SkillNameDic[row.RECORD_ID] = row.JP_NAME;
			            break;
		            case SystemLanguage.Chinese:
			            SkillNameDic[row.RECORD_ID] = row.CN_NAME;
			            break;
		            default:
			            SkillNameDic[row.RECORD_ID] = row.EN_NAME;
			            break;
	            }
            }
            
            if (!SkillIntroDic.ContainsKey(row.RECORD_ID))
            {
	            switch (language)
	            {
		            case SystemLanguage.English:
			            SkillIntroDic.Add(row.RECORD_ID, row.EN_INTRO);
			            break;
		            case SystemLanguage.Japanese:
			            SkillIntroDic.Add(row.RECORD_ID, row.JP_INTRO);
			            break;
		            case SystemLanguage.Chinese:
			            SkillIntroDic.Add(row.RECORD_ID, row.CN_INTRO);
			            break;
		            default:
			            SkillIntroDic.Add(row.RECORD_ID, row.EN_INTRO);
			            break;
	            }
            }
            else
            {
	            switch (language)
	            {
		            case SystemLanguage.English:
			            SkillIntroDic[row.RECORD_ID] = row.EN_INTRO;
			            break;
		            case SystemLanguage.Japanese:
			            SkillIntroDic[row.RECORD_ID] = row.JP_INTRO;
			            break;
		            case SystemLanguage.Chinese:
			            SkillIntroDic[row.RECORD_ID] = row.CN_INTRO;
			            break;
		            default:
			            SkillIntroDic[row.RECORD_ID] = row.EN_INTRO;
			            break;
	            }
            }
        }
    }
    
    static void Load(TextAsset csv)
    {
	    rowList.Clear();
    	var grid = CsvParser2.Parse(csv.text);
    	for(var i = 1 ; i < grid.Length ; i++)
    	{
	        if (grid[i].Length == 7)
	        {
		        var row = new Row
		        {
			        RECORD_ID = grid[i][0],
			        EN_NAME = grid[i][1],
			        JP_NAME = grid[i][2],
			        CN_NAME = grid[i][3],
			        EN_INTRO = grid[i][4],
			        JP_INTRO = grid[i][5], 
			        CN_INTRO = grid[i][6], 
		        };
		        rowList.Add(row);
	        }
        }
        PrepareSkillNames(AppSetting.Value.Language);
    	isLoaded = true;
    }
    
	public static async UniTask LoadSkillNamesFromConfig()
    {
	    var csv = await AddressablesLogic.LoadT<TextAsset>("Config/"+ CommonSetting.SkillNameFile);
	    if (csv != null)
        {
            Load(csv);
        }
    }

	public int NumRows()
	{
		return rowList.Count;
	}
    
	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

	public Row Find_RECORD_ID(string find)
	{
		return rowList.Find(x => x.RECORD_ID == find);
	}
	public List<Row> FindAll_RECORD_ID(string find)
	{
		return rowList.FindAll(x => x.RECORD_ID == find);
	}
	public Row Find_EN_NAME(string find)
	{
		return rowList.Find(x => x.EN_NAME == find);
	}
	public List<Row> FindAll_EN_NAME(string find)
	{
		return rowList.FindAll(x => x.EN_NAME == find);
	}
	public Row Find_JP_NAME(string find)
	{
		return rowList.Find(x => x.JP_NAME == find);
	}
	public List<Row> FindAll_JP_NAME(string find)
	{
		return rowList.FindAll(x => x.JP_NAME == find);
	}
	public Row Find_CN_NAME(string find)
	{
		return rowList.Find(x => x.CN_NAME == find);
	}
	public List<Row> FindAll_CN_NAME(string find)
	{
		return rowList.FindAll(x => x.CN_NAME == find);
	}
}