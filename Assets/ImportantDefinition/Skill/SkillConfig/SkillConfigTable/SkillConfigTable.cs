// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections.Generic;
using System;
using System.IO;
using System.Linq;
using System.Text;
using Cysharp.Threading.Tasks;
using Skill;

public partial class SkillConfigTable
{
    public static IDictionary<string, SkillConfig> SkillConfigRefDic = new Dictionary<string, SkillConfig>();
    
    public class Row
    {
        public string RECORD_ID;
        public string REAL_NAME;
        public string TYPE;
        public string SP_LEVEL;
        public string ATTACK_WEIGHT;
        public string HP_WEIGHT;
        public string ATTACK_TYPE;
        public string EVENT_CODE;
    }

    public static readonly List<Row> rowList = new List<Row>();
    
    static bool isLoaded;
    public static bool IsLoaded()
    {
    	return isLoaded;
    }

    static readonly List<string> AttackTypes = new List<string>
    {
        "GR","GM","GI","CT"
    };
    
    static bool LegalStateType(string attackType)
    {
        return AttackTypes.Contains(attackType);
    }
    
    public static async UniTask LoadAllSkillConfigs()
    {
        await LoadAllSkillConfigFromLocalConfigFile();
        await SkillNameTable.LoadSkillNamesFromConfig();
        RefreshSkillConfigDicForReference();
    }
    
    public static void RefreshSkillConfigDicForReference()
    {
        IDictionary<string, SkillConfig> dic = new Dictionary<string, SkillConfig>();
        var all = RowsToSkillConfigList(rowList);
        foreach (var skillConfig in all)
        {
            DicAdd<string, SkillConfig>.Add(dic, skillConfig.RECORD_ID, skillConfig);
        }
        SkillConfigRefDic = dic;
    }
    
    /// <summary>
    /// 获取技能定义信息
    /// </summary>
    /// <param name="id">SKill ID</param>
    /// <returns></returns>
    public static SkillConfig GetSkillConfigByRecordId(string id)
    {
        if (string.IsNullOrEmpty(id)) return null;
        SkillConfigRefDic.TryGetValue(id, out SkillConfig skillConfig);
        return skillConfig;
    }
    
    public static List<SkillConfig> GetSkillConfigsOfType(string type)
    {
        var skillConfigsOfType = new List<SkillConfig>();
        foreach (var one in SkillConfigRefDic)
        {
            if (one.Value.TYPE == type)
                skillConfigsOfType.Add(one.Value);
        }
        return skillConfigsOfType;
    }
    
    static async UniTask LoadAllSkillConfigFromLocalConfigFile()
    {
        var csv = await AddressablesLogic.LoadT<TextAsset>("Config/" + CommonSetting.SkillConfigFile);
        var aiCsv = await AddressablesLogic.LoadT<TextAsset>("Config/" + CommonSetting.SkillAIFile);
        Load(csv);
        SkillAIAttrs.Load(aiCsv);
    }
    
    public static void SaveByCurrentRows(string filePath)
    {
        List<Row> toDeleteList = new List<Row>();
        foreach(Row row in rowList)
        {
            if (row.REAL_NAME == null)
                toDeleteList.Add(row);
        }
        foreach(Row row in toDeleteList)
        {
            Debug.Log("由于原先行的一些问题将之予以删除：" + rowList.IndexOf(row));
            rowList.Remove(row);
        }

        string[][] grid = new string[rowList.Count + 1][];
        for (int i = 0; i < grid.Length; i++)
        {
            grid[i] = new string[12];
            if (i == 0)
            {
                grid[i][0] = "RECORD_ID";
                grid[i][1] = "REAL_NAME";
                grid[i][2] = "USEABLE_MONSTER_TYPE";
                grid[i][3] = "SP_LEVEL";
                grid[i][4] = "ATTACK_WEIGHT";
                grid[i][5] = "HP_WEIGHT";
                grid[i][6] = "ATTACK_TYPE";
                grid[i][7] = "EVENT_CODE";
                grid[i][8] = "RARITY_LEVEL";
            }
            else
            {
                grid[i][0] = rowList[i - 1].RECORD_ID;
                grid[i][1] = rowList[i - 1].REAL_NAME;
                grid[i][2] = rowList[i - 1].TYPE;
                grid[i][3] = rowList[i - 1].SP_LEVEL;
                grid[i][4] = rowList[i - 1].ATTACK_WEIGHT;
                grid[i][5] = rowList[i - 1].HP_WEIGHT;
                grid[i][6] = rowList[i - 1].ATTACK_TYPE;
                grid[i][7] = rowList[i - 1].EVENT_CODE;
                if (!LegalStateType(rowList[i - 1].ATTACK_TYPE))
                {
                    Debug.Log("崩溃级错误，技能Type有错：RECORDID"+ rowList[i - 1].RECORD_ID);
                }
            }
        }
        string delimiter = ",";
        StringBuilder sb = new StringBuilder();

        for (int index = 0; index < grid.Length; index++)
            sb.AppendLine(string.Join(delimiter, grid[index]));

        Debug.Log("尝试最终保存文件" + filePath);
        StreamWriter outStream = File.CreateText(filePath);
        outStream.WriteLine(sb);
        outStream.Close();
    }
    
	public static void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
        try
        {
            for (int i = 1; i < grid.Length; i++)
            {
                Row row = new Row
                {
                    RECORD_ID = grid[i][0],
                    REAL_NAME = grid[i][1],
                    TYPE = grid[i][2],
                    SP_LEVEL = grid[i][3],
                    ATTACK_WEIGHT = grid[i][4],
                    HP_WEIGHT = grid[i][5],
                    ATTACK_TYPE = grid[i][6],
                    EVENT_CODE = grid[i][7]
                };
                if (!LegalStateType(grid[i][6]))
                {
                    Debug.Log("崩溃级错误，技能Type有错：RECORDID"+ grid[i][0]);
                }
                rowList.Add(row);
            }
            isLoaded = true;
        }
        catch (Exception e)
        {
            Debug.Log(e);
        }
    }
    
    public static List<Row> FindAll_type_keyName(string type, string keyName)
    {
        return (rowList.FindAll(x => x.REAL_NAME == keyName).Intersect(rowList.FindAll(x => x.TYPE == type))).ToList();
    }

    public int NumRows()
	{
		return rowList.Count;
	}
    
    public List<Row> GetRowList()
    {
        return rowList;
    }

	public Row GetAt(int i)
	{
        return rowList.Count <= i ? null : rowList[i];
    }
    
    public Row Find_ID(string find)
	{
		return rowList.Find(x => x.RECORD_ID == find);
	}
	public List<Row> FindAll_ID(string find)
	{
		return rowList.FindAll(x => x.RECORD_ID == find);
	}
    public Row Find_MONSTER_TYPE_CODE(string find)
    {
    	return rowList.Find(x => x.TYPE == find);
    }
    public static List<Row> FindAll_MONSTER_TYPE(string find)
    {
    	return rowList.FindAll(x => x.TYPE == find);
    }

    public static Row Find_keyName(string find)
    {
    	return rowList.Find(x => x.REAL_NAME == find);
    }
    public List<Row> FindAll_keyName(string find)
    {
    	return rowList.FindAll(x => x.REAL_NAME == find);
    }
    public Row Find_AT(string find)
    {
    	return rowList.Find(x => x.ATTACK_WEIGHT == find);
    }
    public List<Row> FindAll_AT(string find)
    {
    	return rowList.FindAll(x => x.ATTACK_WEIGHT == find);
    }
    public Row Find_attackType(string find)
    {
    	return rowList.Find(x => x.ATTACK_TYPE == find);
    }
    public List<Row> FindAll_attackType(string find)
    {
    	return rowList.FindAll(x => x.ATTACK_TYPE == find);
    }
    public Row Find_SPLevel(string find)
    {
    	return rowList.Find(x => x.SP_LEVEL == find);
    }
    public List<Row> FindAll_SPLevel(string find)
    {
    	return rowList.FindAll(x => x.SP_LEVEL == find);
    }
}