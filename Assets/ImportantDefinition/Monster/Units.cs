// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections.Generic;
using System;
using System.IO;
using System.Linq;
using System.Text;
using Cysharp.Threading.Tasks;
using Skill;

public static class Units
{
    public static readonly IDictionary<string, UnitConfig> Dic = new Dictionary<string, UnitConfig>();

    [Serializable]
    public class Row
	{
		public string RECORD_ID;
        public string REAL_NAME;
        public string MONSTER_TYPE;
		public string ELEMENT;
        public string RARITY_LEVEL;
		public string BASIC_MOVEMENT_PACK;
		public string MOVE_TYPE;
		public string DODGE_SKILL;
		public string DEFENDABLE_FLAG;
	}
            
    public static UnitConfig GetUnitConfig(string RECORD_ID)
    {
        if (RECORD_ID == null)
            return null;
        return Dic.TryGetValue(RECORD_ID, out var value) ? value : null;
    }
    static async UniTask LoadFile()
    {
        //暂时做如下处理
        var CSV = await AddressablesLogic.LoadT<TextAsset>("Config/" + CommonSetting.UnitConfigFile);
        if (CSV)
        {
            Load(CSV);
        }
        else
            Debug.Log("没能读取到角色数据库文件。");
    }
    
    static void RefreshDic()
    {
        Dic.Clear();
        var characterResourceInfos = RowToConfigList(rowList);
        foreach (var one in characterResourceInfos)            
        {
            Dic.Add(one.RECORD_ID,one);
        }
    }
    
    public static async UniTask LoadUnitConfigs()
    {
        await LoadFile();
        RefreshDic();
    }
    
    public static readonly List<Row> rowList = new List<Row>();
    static bool isLoaded;

	public static bool IsLoaded()
	{
		return isLoaded;
	}

	public static List<Row> GetRowList()
	{
		return rowList;
	}

	public static void Load(TextAsset csv)
	{
		rowList.Clear();
		string[][] grid = CsvParser2.Parse(csv.text);
        try
        {
            for (int i = 1; i < grid.Length; i++)
            {
                Row row = new Row()
                {
                    RECORD_ID = grid[i][0],
                    REAL_NAME = grid[i][1],
                    MONSTER_TYPE = grid[i][2],
                    ELEMENT = grid[i][3],
                    RARITY_LEVEL = grid[i][4],
                    BASIC_MOVEMENT_PACK = grid[i][5],
                    MOVE_TYPE = grid[i][6],
                    DODGE_SKILL = grid[i][7],
                    DEFENDABLE_FLAG = grid[i][8]
                };
                rowList.Add(row);
            }
            isLoaded = true;
        }
        catch (Exception e)
        {
            Debug.Log(e);
        }
    }

    public static void SaveByCurrentRows(string filePath)
    {
        List<Row> toDeleteList = new List<Row>();
        foreach (Row row in rowList)
        {
            if (row.REAL_NAME == null)
                toDeleteList.Add(row);
        }
        foreach (Row row in toDeleteList)
        {
            Debug.Log("由于原先行的一些问题将之予以删除：" + rowList.IndexOf(row));
            rowList.Remove(row);
        }

        string[][] grid = new string[rowList.Count + 1][];
        for (int i = 0; i < grid.Length; i++)
        {
            grid[i] = new string[10];
            if (i == 0)
            {                        
                grid[i][0] = "RECORD_ID";
                grid[i][1] = "REAL_NAME";
                grid[i][2] = "MONSTER_TYPE_CODE";
                grid[i][3] = "ZOKUSEI";
                grid[i][4] = "RARITY_LEVEL";
                grid[i][5] = "BASIC_MOVEMENT_PACK";
                grid[i][6] = "MOVE_TYPE";
                grid[i][7] = "MOTILITY_SKILL_PACK";
                grid[i][8] = "DEFENDABLE_FLAG";
            }
            else
            {
                grid[i][0] = rowList[i - 1].RECORD_ID;
                grid[i][1] = rowList[i - 1].REAL_NAME;
                grid[i][2] = rowList[i - 1].MONSTER_TYPE;
                grid[i][3] = rowList[i - 1].ELEMENT;
                grid[i][4] = rowList[i - 1].RARITY_LEVEL;
                grid[i][5] = rowList[i - 1].BASIC_MOVEMENT_PACK;
                grid[i][6] = rowList[i - 1].MOVE_TYPE;
                grid[i][7] = rowList[i - 1].DODGE_SKILL;
                grid[i][8] = rowList[i - 1].DEFENDABLE_FLAG;
            }
        }
        string delimiter = ",";
        StringBuilder sb = new StringBuilder();

        for (int index = 0; index < grid.Length; index++)
        {
            sb.AppendLine(string.Join(delimiter, grid[index]));
        }
        
        Debug.Log("尝试最终保存文件（路径应该从Asset/开始，加json后缀）：" + filePath);
        StreamWriter outStream = File.CreateText(filePath);
        outStream.WriteLine(sb);
        outStream.Close();
    }

    // by haku 9.12
    // filePath的后面记得包括文件名和CSV后缀？
    public static void Save(string filePath, List<UnitConfig> characterResourceList)
    {
        try
        {
            rowList.Clear();

            foreach (UnitConfig Config in characterResourceList)
            {
                Debug.Log("尝试整理角色：" + Config.REAL_NAME);
                Row row = new Row
                {
                    RECORD_ID = Config.RECORD_ID,
                    MONSTER_TYPE = Config.TYPE,
                    REAL_NAME = Config.REAL_NAME,
                    ELEMENT = ((int)Config.element).ToString(),
                    BASIC_MOVEMENT_PACK = Config.BASIC_MOVEMENT_PACK
                };
                switch (Config.MoveType)
                {
                    case MoveType.Move_normal:
                        row.MOVE_TYPE = "Move1";
                        break;
                    case MoveType.Move_slow:
                        row.MOVE_TYPE = "Move2";
                        break;
                    case MoveType.Move_fast:
                        row.MOVE_TYPE = "Move3";
                        break;
                    default:
                        row.MOVE_TYPE = "Move1";
                        break;
                }
                switch (Config.RushType)
                {
                    case RushType.Rush:
                        row.DODGE_SKILL = "Rush";
                        break;
                    case RushType.RushBack:
                        row.DODGE_SKILL = "RushBack";
                        break;
                    case RushType.None:
                        row.DODGE_SKILL = "None";
                        break;
                    default:
                        row.DODGE_SKILL = "RushBack";
                        break;
                }
                row.DEFENDABLE_FLAG = Config.DEFENDABLE_FLAG ? "1" : "0";

                row.RARITY_LEVEL = Config.RARITY_LEVEL.ToString();
                rowList.Add(row);
            }

            string[][] grid = new string[rowList.Count + 1][];
            for (int i = 0; i < grid.Length; i++)
            {
                grid[i] = new string[10];
                if (i == 0)
                {
                    grid[i][0] = "RECORD_ID";
                    grid[i][1] = "REAL_NAME";
                    grid[i][2] = "MONSTER_TYPE_CODE";
                    grid[i][3] = "ZOKUSEI";
                    grid[i][4] = "RARITY_LEVEL";
                    grid[i][5] = "BASIC_MOVEMENT_PACK";
                    grid[i][6] = "MOVE_TYPE";
                    grid[i][7] = "MOTILITY_SKILL_PACK";
                    grid[i][8] = "DEFENDABLE_FLAG";
                }
                else
                {
                    grid[i][0] = rowList[i - 1].RECORD_ID;
                    grid[i][1] = rowList[i - 1].REAL_NAME;
                    grid[i][2] = rowList[i - 1].MONSTER_TYPE;
                    grid[i][3] = rowList[i - 1].ELEMENT;
                    grid[i][4] = rowList[i - 1].RARITY_LEVEL;
                    grid[i][5] = rowList[i - 1].BASIC_MOVEMENT_PACK;
                    grid[i][6] = rowList[i - 1].MOVE_TYPE;
                    grid[i][7] = rowList[i - 1].DODGE_SKILL;
                    grid[i][8] = rowList[i - 1].DEFENDABLE_FLAG;
                }
            }
            string delimiter = ",";
            StringBuilder sb = new StringBuilder();

            for (int index = 0; index < grid.Length; index++)
            {
                sb.AppendLine(string.Join(delimiter, grid[index]));
            }
            
            Debug.Log("尝试最终保存文件" + filePath);
            StreamWriter outStream = File.CreateText(filePath);
            outStream.WriteLine(sb);
            outStream.Close();
        }
        catch (Exception E)
        {
            Debug.Log(E);
        }
    }

    public static List<UnitConfig> RowToConfigList(List<Row> List)
    {
        List<UnitConfig> ToReturn = new List<UnitConfig>();
        foreach (Row row in List)
        {
            UnitConfig _CharacterResourceInfo = RowToUnitConfigInfo(row);
            if (_CharacterResourceInfo != null)
                ToReturn.Add(_CharacterResourceInfo);
            else
                Debug.Log("这地方感觉有一些逻辑问题");
        }
        return ToReturn;
    }

    public static Row ConfigToRow(UnitConfig config)
    {
        if (config == null)
            return null;
        Row row = new Row
        {
            RECORD_ID = config.RECORD_ID,
            MONSTER_TYPE = config.TYPE,
            REAL_NAME = config.REAL_NAME,
            ELEMENT = ((int)config.element).ToString(),
            BASIC_MOVEMENT_PACK = config.BASIC_MOVEMENT_PACK
        };
        switch (config.MoveType)
        {
            case MoveType.Move_normal:
                row.MOVE_TYPE = "Move1";
                break;
            case MoveType.Move_slow:
                row.MOVE_TYPE = "Move2";
                break;
            case MoveType.Move_fast:
                row.MOVE_TYPE = "Move3";
                break;
        }
        switch(config.RushType)
        {
            case RushType.None:
                row.DODGE_SKILL = "None";
                break;
            case RushType.Rush:
                row.DODGE_SKILL = "Rush";
                break;
            case RushType.RushBack:
                row.DODGE_SKILL = "RushBack";
                break;
        }

        row.DEFENDABLE_FLAG = config.DEFENDABLE_FLAG ? "1" : "0";
        row.RARITY_LEVEL = config.RARITY_LEVEL.ToString();
        return row;
    }

    public static UnitConfig RowToUnitConfigInfo(Row row)
    {
        if (row == null)
            return null;
        var _Config = new UnitConfig
        {
            RECORD_ID = row.RECORD_ID,
            TYPE = row.MONSTER_TYPE,
            REAL_NAME = row.REAL_NAME
        };

        switch (row.ELEMENT)
        {
            case "4":
                _Config.element = Element.blueMagic;
                break;
            case "3":
                _Config.element = Element.redMagic;
                break;
            case "5":
                _Config.element = Element.greenMagic;
                break;
            case "1":
                _Config.element = Element.darkMagic;
                break;
            case "2":
                _Config.element = Element.lightMagic;
                break;
            default:
                _Config.element = Element.lightMagic;
                break;
        }

        _Config.BASIC_MOVEMENT_PACK = row.BASIC_MOVEMENT_PACK;

        switch (row.MOVE_TYPE)
        {
            case "Move1":
                _Config.MoveType = MoveType.Move_normal;
                break;
            case "Move2":
                _Config.MoveType = MoveType.Move_slow;
                break;
            case "Move3":
                _Config.MoveType = MoveType.Move_fast;
                break;
            default:
                _Config.MoveType = MoveType.Move_normal;
                break;
        }

        switch (row.DODGE_SKILL)
        {
            case "Rush":
                _Config.RushType = RushType.Rush;
                break;
            case "RushBack":
                _Config.RushType = RushType.RushBack;
                break;
            case "None":
                _Config.RushType = RushType.None;
                break;
            default:
                _Config.RushType = RushType.RushBack;
                break;
        }

        _Config.DEFENDABLE_FLAG = row.DEFENDABLE_FLAG == "1";
        _Config.RARITY_LEVEL = Int32.Parse(row.RARITY_LEVEL);
        return _Config;
    }

    public static int NumRows()
	{
		return rowList.Count;
	}
    
    public static IDictionary<string,string> GetMonsterIDsAndNamesDic(string type) // close, near, far.rarelevel = -1代表全部，0代表无星级技能
    {
        IDictionary<string, string> mdic = new Dictionary<string, string>();
        List<Row> references = FindAll_MONSTER_TYPE(type);
        foreach (Row one in references)
        {
            mdic.Add(one.RECORD_ID, one.REAL_NAME);
        }
        return mdic;
    }

    public static List<Row> FindAll_TYPE_REALNAME(string MONSTER_TYPE, string keyName)
    {
        //monsterTypeReferenceTable.Row reference = monsterTypeReferenceTable.Instance.Find_MONSTER_TYPE_CODE(row.MONSTER_TYPE_CODE);
        return (rowList.FindAll(x => x.REAL_NAME == keyName).Intersect(rowList.FindAll(x => x.MONSTER_TYPE == MONSTER_TYPE))).ToList();
    }

    public static Row GetAt(int i)
	{
        return rowList.Count <= i ? null : rowList[i];
    }

    public static Row Find_RECORD_ID(string find)
	{
		return rowList.Find(x => x.RECORD_ID == find);
	}

    public static Row Find_REAL_NAME(string find)
	{
		return rowList.Find(x => x.REAL_NAME == find);
	}
    
    public static List<Row> FindAll_MONSTER_TYPE(string find)
    {
        return rowList.FindAll(x => x.MONSTER_TYPE == find);
    }
    
	public static Row Find_Zokusei(string find)
	{
		return rowList.Find(x => x.ELEMENT == find);
	}
	public static List<Row> FindAll_Zokusei(string find)
	{
		return rowList.FindAll(x => x.ELEMENT == find);
	}
    public static Row Find_BasicMoveSet(string find)
	{
        return rowList.Find(x => x.BASIC_MOVEMENT_PACK == find);
	}
	public static List<Row> FindAll_BasicMoveSet(string find)
	{
		return rowList.FindAll(x => x.BASIC_MOVEMENT_PACK == find);
	}
	public static Row Find_MoveType(string find)
	{
        return rowList.Find(x => x.MOVE_TYPE == find);
	}
	public static List<Row> FindAll_MoveType(string find)
	{
		return rowList.FindAll(x => x.MOVE_TYPE == find);
	}
	public static Row Find_accSkill(string find)
	{
		return rowList.Find(x => x.DODGE_SKILL == find);
	}
	public static List<Row> FindAll_accSkill(string find)
	{
		return rowList.FindAll(x => x.DODGE_SKILL == find);
	}
	public static Row Find_canDefend(string find)
	{
        return rowList.Find(x => x.DEFENDABLE_FLAG == find);
	}
	public static List<Row> FindAll_canDefend(string find)
	{
		return rowList.FindAll(x => x.DEFENDABLE_FLAG == find);
	}
	public static Row Find_rarelevel(string find)
	{
		return rowList.Find(x => x.RARITY_LEVEL == find);
	}
	public static List<Row> FindAll_rarelevel(string find)
	{
		return rowList.FindAll(x => x.RARITY_LEVEL == find);
	}
    
    // 20200322 新追加。角色type的追加按说不应该那么麻烦，事前定义好就可以
    public static List<string> GetTypeList()
    {
        List<string> typeList = new List<string>
        {
            "human",
            "dog"
        };
        return typeList;
    }
}

